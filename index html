<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Онлайн Шериф Мафия</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            color: white;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            max-width: 1000px;
            width: 100%;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            position: relative;
        }
        
        .game-screen {
            display: none;
            padding: 30px;
        }
        
        .active {
            display: block;
        }
        
        header {
            text-align: center;
            padding: 20px;
            background: rgba(0, 0, 0, 0.5);
            border-bottom: 2px solid #b21f1f;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: #ffcc00;
            text-shadow: 0 0 10px rgba(255, 204, 0, 0.7);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
        }
        
        .lobby-container, .join-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            padding: 30px;
        }
        
        .input-group {
            display: flex;
            gap: 10px;
            width: 100%;
            max-width: 500px;
        }
        
        .input-group-column {
            flex-direction: column;
        }
        
        input {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 2px solid #444;
        }
        
        input:focus {
            outline: none;
            border-color: #ffcc00;
        }
        
        button {
            padding: 15px 25px;
            background: linear-gradient(to right, #b21f1f, #8a1c1c);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        button:hover {
            background: linear-gradient(to right, #c62e2e, #a12222);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        button:disabled {
            background: #555;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .player-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 15px;
            width: 100%;
            margin-top: 20px;
        }
        
        .player-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }
        
        .player-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: #ffcc00;
            transform: scaleX(0);
            transition: transform 0.3s;
        }
        
        .player-card.ready::before {
            background: #4CAF50;
            transform: scaleX(1);
        }
        
        .player-card.mafia {
            background: rgba(178, 31, 31, 0.3);
        }
        
        .player-card.sheriff {
            background: rgba(255, 204, 0, 0.2);
        }
        
        .player-card.ready:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .player-name {
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 5px;
        }
        
        .player-role {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .game-info {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
            background: rgba(0, 0, 0, 0.4);
            padding: 15px;
            border-radius: 10px;
        }
        
        .phase-display {
            font-size: 1.3rem;
            font-weight: bold;
            text-align: center;
            padding: 15px;
            margin: 20px 0;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.4);
        }
        
        .night {
            background: linear-gradient(to right, #1a237e, #283593);
        }
        
        .day {
            background: linear-gradient(to right, #c62828, #b71c1c);
        }
        
        .action-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }
        
        .action-card {
            flex: 1;
            min-width: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
        }
        
        .action-title {
            font-size: 1.3rem;
            margin-bottom: 15px;
            color: #ffcc00;
        }
        
        .log-container {
            margin-top: 30px;
            background: rgba(0, 0, 0, 0.4);
            border-radius: 10px;
            padding: 20px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        .log-title {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: #ffcc00;
        }
        
        .log-entry {
            padding: 8px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .mafia-log {
            color: #ff6b6b;
        }
        
        .sheriff-log {
            color: #4dabf7;
        }
        
        .game-over {
            text-align: center;
            padding: 30px;
        }
        
        .winner-title {
            font-size: 2rem;
            color: #ffcc00;
            margin-bottom: 20px;
        }
        
        .role-badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-left: 10px;
        }
        
        .mafia-badge {
            background: #b21f1f;
        }
        
        .sheriff-badge {
            background: #ffcc00;
            color: black;
        }
        
        .civilian-badge {
            background: #4CAF50;
        }
        
        .player-status {
            font-size: 0.8rem;
            margin-top: 5px;
        }
        
        .alive {
            color: #4CAF50;
        }
        
        .dead {
            color: #f44336;
            text-decoration: line-through;
        }
        
        .room-info {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-top: 10px;
        }
        
        .room-id {
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 15px;
            border-radius: 20px;
            font-family: monospace;
            font-size: 1.1rem;
        }
        
        .copy-btn {
            padding: 8px 15px;
            background: #444;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .copy-btn:hover {
            background: #555;
        }
        
        .instructions {
            background: rgba(0, 0, 0, 0.4);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            font-size: 0.9rem;
            line-height: 1.6;
        }
        
        .instructions h3 {
            color: #ffcc00;
            margin-bottom: 10px;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 8px;
        }
        
        .back-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 10px 15px;
            background: #444;
            border-radius: 10px;
            cursor: pointer;
        }
        
        @media (max-width: 768px) {
            .input-group {
                flex-direction: column;
            }
            
            .action-container {
                flex-direction: column;
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-user-secret"></i> ОНЛАЙН ШЕРИФ МАФИЯ</h1>
            <div class="subtitle">Играйте с друзьями в любое время и в любом месте!</div>
        </header>
        
        <!-- Экран входа в комнату -->
        <div id="joinScreen" class="game-screen active">
            <div class="join-container">
                <div class="input-group input-group-column">
                    <input type="text" id="joinPlayerName" placeholder="Введите ваше имя" maxlength="15">
                    <input type="text" id="roomIdInput" placeholder="Введите ID комнаты (например: MAF-1234)">
                    <button id="joinRoomBtn">Присоединиться к игре</button>
                </div>
                
                <div class="input-group">
                    <button id="createRoomBtn">Создать новую игру</button>
                </div>
                
                <div class="instructions">
                    <h3>Как начать играть:</h3>
                    <ul>
                        <li>Чтобы создать новую игру, нажмите "Создать новую игру"</li>
                        <li>Чтобы присоединиться к существующей игре:
                            <ol>
                                <li>Попросите ID комнаты у создателя игры</li>
                                <li>Введите ваше имя</li>
                                <li>Введите ID комнаты</li>
                                <li>Нажмите "Присоединиться к игре"</li>
                            </ol>
                        </li>
                        <li>Игра начинается, когда создатель комнаты нажимает "Начать игру"</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <!-- Лобби для подключения игроков -->
        <div id="lobbyScreen" class="game-screen">
            <div class="lobby-container">
                <div class="back-btn" id="backBtn">
                    <i class="fas fa-arrow-left"></i> Назад
                </div>
                
                <div class="input-group">
                    <input type="text" id="playerName" placeholder="Введите ваше имя" maxlength="15">
                    <button id="joinBtn">Присоединиться</button>
                </div>
                
                <div class="game-info">
                    <div>Игроков: <span id="playerCount">0</span>/5</div>
                    <div>Статус: <span id="lobbyStatus">Ожидание игроков</span></div>
                </div>
                
                <div class="player-list" id="playerList">
                    <!-- Игроки будут добавляться динамически -->
                </div>
                
                <div class="room-info">
                    <div class="room-id">ID комнаты: <span id="roomId">MAF-2859</span></div>
                    <div class="copy-btn" id="copyBtn"><i class="fas fa-copy"></i> Копировать</div>
                </div>
                
                <button id="startBtn" disabled>Начать игру</button>
                
                <div class="instructions">
                    <h3>Как играть:</h3>
                    <ul>
                        <li>Создатель комнаты начинает игру, когда все игроки присоединятся</li>
                        <li>Роли распределяются случайным образом: 1 мафия, 1 шериф, 3 мирных жителя</li>
                        <li>Ночью мафия выбирает жертву, шериф проверяет игроков</li>
                        <li>Днём все игроки обсуждают и голосуют за подозреваемого</li>
                        <li>Мирные жители побеждают, если устранят мафию</li>
                        <li>Мафия побеждает, когда её становится больше, чем мирных жителей</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <!-- Экран игрового процесса -->
        <div id="gameScreen" class="game-screen">
            <div class="game-info">
                <div>Игроков: <span id="gamePlayerCount">0</span>/5</div>
                <div>День: <span id="dayCount">1</span></div>
                <div>Комната: <span id="gameRoomId">MAF-2859</span></div>
            </div>
            
            <div id="phaseDisplay" class="phase-display">НОЧЬ</div>
            
            <div class="action-container">
                <div class="action-card">
                    <div class="action-title">Ваша роль</div>
                    <div id="playerRole">Ожидание...</div>
                    <div id="playerStatus" class="player-status alive">Статус: жив</div>
                </div>
                
                <div class="action-card">
                    <div class="action-title">Ваше действие</div>
                    <div id="actionDescription">Ожидайте начала игры...</div>
                    <div id="actionButtons" style="margin-top: 15px;"></div>
                </div>
            </div>
            
            <div class="log-container">
                <div class="log-title">События игры <i class="fas fa-scroll"></i></div>
                <div id="gameLog">
                    <div class="log-entry">Игра началась. Наступает ночь...</div>
                </div>
            </div>
        </div>
        
        <!-- Экран результатов игры -->
        <div id="resultScreen" class="game-screen">
            <div class="game-over">
                <div id="winnerTitle" class="winner-title">Победа мирных жителей!</div>
                <div class="player-list" id="resultPlayerList">
                    <!-- Результаты игроков будут добавляться динамически -->
                </div>
                <button id="restartBtn"><i class="fas fa-redo"></i> Играть снова</button>
            </div>
        </div>
    </div>

    <script>
        // Эмуляция сервера через localStorage
        const SERVER_KEY = 'mafia_server_state';
        
        // Состояние игры
        let gameState = {
            roomId: '',
            players: [],
            currentPlayer: null,
            dayCount: 1,
            phase: 'night',
            gameOver: false,
            winner: null,
            logs: [],
            actions: {}
        };
        
        // Текущий игрок (локальный)
        let currentPlayer = {
            id: null,
            name: '',
            role: null,
            status: 'alive'
        };
        
        // Роли для 5 игроков
        const roles = ['mafia', 'sheriff', 'civilian', 'civilian', 'civilian'];
        
        // DOM элементы
        const joinScreen = document.getElementById('joinScreen');
        const lobbyScreen = document.getElementById('lobbyScreen');
        const gameScreen = document.getElementById('gameScreen');
        const resultScreen = document.getElementById('resultScreen');
        const joinPlayerNameInput = document.getElementById('joinPlayerName');
        const roomIdInput = document.getElementById('roomIdInput');
        const joinRoomBtn = document.getElementById('joinRoomBtn');
        const createRoomBtn = document.getElementById('createRoomBtn');
        const playerNameInput = document.getElementById('playerName');
        const joinBtn = document.getElementById('joinBtn');
        const startBtn = document.getElementById('startBtn');
        const playerList = document.getElementById('playerList');
        const playerCount = document.getElementById('playerCount');
        const gamePlayerCount = document.getElementById('gamePlayerCount');
        const dayCount = document.getElementById('dayCount');
        const phaseDisplay = document.getElementById('phaseDisplay');
        const playerRole = document.getElementById('playerRole');
        const playerStatus = document.getElementById('playerStatus');
        const actionDescription = document.getElementById('actionDescription');
        const actionButtons = document.getElementById('actionButtons');
        const gameLog = document.getElementById('gameLog');
        const resultPlayerList = document.getElementById('resultPlayerList');
        const winnerTitle = document.getElementById('winnerTitle');
        const restartBtn = document.getElementById('restartBtn');
        const roomIdElement = document.getElementById('roomId');
        const gameRoomId = document.getElementById('gameRoomId');
        const copyBtn = document.getElementById('copyBtn');
        const backBtn = document.getElementById('backBtn');
        
        // Перевод ролей
        const roleTranslations = {
            'mafia': 'Мафия',
            'sheriff': 'Шериф',
            'civilian': 'Мирный житель'
        };
        
        // Инициализация игры
        function initGame() {
            // Обработчики событий
            joinRoomBtn.addEventListener('click', joinRoom);
            createRoomBtn.addEventListener('click', createRoom);
            joinBtn.addEventListener('click', joinLobby);
            startBtn.addEventListener('click', startGame);
            restartBtn.addEventListener('click', restartGame);
            copyBtn.addEventListener('click', copyRoomId);
            backBtn.addEventListener('click', goBackToJoinScreen);
            
            // Авто-заполнение для демонстрации
            playerNameInput.value = 'Игрок' + (Math.floor(Math.random() * 100));
            joinPlayerNameInput.value = 'Игрок' + (Math.floor(Math.random() * 100));
            
            // Эмуляция получения обновлений с сервера
            setInterval(loadGameState, 2000);
        }
        
        // Копирование ID комнаты
        function copyRoomId() {
            navigator.clipboard.writeText(gameState.roomId);
            alert('ID комнаты скопирован! Отправьте его друзьям.');
        }
        
        // Создание новой комнаты
        function createRoom() {
            const name = joinPlayerNameInput.value.trim();
            if (name.length < 2) {
                alert('Имя должно содержать не менее 2 символов');
                return;
            }
            
            // Генерируем ID комнаты
            gameState.roomId = 'MAF-' + Math.floor(1000 + Math.random() * 9000);
            gameState.players = [];
            gameState.logs = [];
            
            // Создаем игрока (хоста)
            const playerId = 'player_' + Date.now();
            currentPlayer = {
                id: playerId,
                name: name,
                role: null,
                status: 'alive',
                ready: false,
                isHost: true
            };
            
            gameState.players.push(currentPlayer);
            saveGameState();
            
            // Обновляем UI
            roomIdElement.textContent = gameState.roomId;
            playerNameInput.value = name;
            
            // Переключаемся на лобби
            joinScreen.classList.remove('active');
            lobbyScreen.classList.add('active');
            
            // Обновляем лобби
            updateLobby();
        }
        
        // Присоединение к комнате по ID
        function joinRoom() {
            const name = joinPlayerNameInput.value.trim();
            const roomId = roomIdInput.value.trim();
            
            if (name.length < 2) {
                alert('Имя должно содержать не менее 2 символов');
                return;
            }
            
            if (!roomId.match(/^MAF-\d{4}$/)) {
                alert('Неверный формат ID комнаты. Пример: MAF-1234');
                return;
            }
            
            // Загружаем состояние комнаты
            const savedState = localStorage.getItem(SERVER_KEY);
            if (!savedState) {
                alert('Комната не найдена');
                return;
            }
            
            try {
                const parsed = JSON.parse(savedState);
                if (parsed.roomId !== roomId) {
                    alert('Комната не найдена');
                    return;
                }
                
                // Проверяем, не заполнена ли комната
                if (parsed.players.length >= 5) {
                    alert('Комната заполнена');
                    return;
                }
                
                // Проверяем, не занято ли имя
                if (parsed.players.some(p => p.name === name)) {
                    alert('Имя уже занято');
                    return;
                }
                
                // Обновляем состояние игры
                gameState = parsed;
                
                // Создаем игрока
                const playerId = 'player_' + Date.now();
                currentPlayer = {
                    id: playerId,
                    name: name,
                    role: null,
                    status: 'alive',
                    ready: false,
                    isHost: false
                };
                
                gameState.players.push(currentPlayer);
                saveGameState();
                
                // Обновляем интерфейс
                roomIdElement.textContent = gameState.roomId;
                gameRoomId.textContent = gameState.roomId;
                playerNameInput.value = name;
                
                // Переключаемся на лобби
                joinScreen.classList.remove('active');
                lobbyScreen.classList.add('active');
                
                // Обновляем лобби
                updateLobby();
                
            } catch (e) {
                console.error('Ошибка при присоединении к комнате:', e);
                alert('Ошибка при присоединении к комнате');
            }
        }
        
        // Загрузка состояния игры с "сервера"
        function loadGameState() {
            const savedState = localStorage.getItem(SERVER_KEY);
            if (savedState) {
                try {
                    const parsed = JSON.parse(savedState);
                    if (parsed.roomId === gameState.roomId) {
                        gameState = parsed;
                        
                        // Обновление интерфейса в зависимости от текущего экрана
                        if (lobbyScreen.classList.contains('active')) {
                            updateLobby();
                        } else if (gameScreen.classList.contains('active')) {
                            updateGameScreen();
                        } else if (resultScreen.classList.contains('active')) {
                            updateResultScreen();
                        }
                    }
                } catch (e) {
                    console.error('Error loading game state:', e);
                }
            }
        }
        
        // Сохранение состояния игры на "сервер"
        function saveGameState() {
            localStorage.setItem(SERVER_KEY, JSON.stringify(gameState));
        }
        
        // Присоединение к лобби (после создания/входа)
        function joinLobby() {
            const name = playerNameInput.value.trim();
            if (name.length < 2) {
                alert('Имя должно содержать не менее 2 символов');
                return;
            }
            
            if (gameState.players.length >= 5) {
                alert('Лобби заполнено (максимум 5 игроков)');
                return;
            }
            
            // Обновляем имя текущего игрока
            currentPlayer.name = name;
            saveGameState();
            
            // Обновляем лобби
            updateLobby();
        }
        
        // Обновление лобби
        function updateLobby() {
            playerList.innerHTML = '';
            playerCount.textContent = gameState.players.length;
            
            // Обновляем статус лобби
            const lobbyStatus = document.getElementById('lobbyStatus');
            if (gameState.players.length === 0) {
                lobbyStatus.textContent = 'Ожидание игроков';
            } else if (gameState.players.length < 5) {
                lobbyStatus.textContent = `Ожидание игроков (${5 - gameState.players.length} из 5)`;
            } else {
                lobbyStatus.textContent = 'Лобби заполнено!';
            }
            
            // Активируем кнопку старта для хоста
            startBtn.disabled = !(currentPlayer.isHost && gameState.players.length >= 3);
            
            // Отображаем игроков
            gameState.players.forEach(player => {
                const playerCard = document.createElement('div');
                playerCard.className = `player-card ${player.ready ? 'ready' : ''} ${player.isHost ? 'host' : ''}`;
                
                let playerInfo = `<div class="player-name">${player.name}</div>`;
                if (player.isHost) {
                    playerInfo += `<div class="player-status"><i class="fas fa-crown"></i> Создатель</div>`;
                } else {
                    playerInfo += `<div class="player-status">${player.ready ? 'Готов' : 'Ожидание...'}</div>`;
                }
                
                playerCard.innerHTML = playerInfo;
                playerList.appendChild(playerCard);
            });
        }
        
        // Начало игры
        function startGame() {
            // Перемешиваем роли
            shuffleRoles();
            
            // Назначаем роли
            assignRoles();
            
            // Устанавливаем первого игрока
            gameState.currentPlayer = gameState.players[0].id;
            gameState.phase = 'night';
            gameState.logs = [{message: 'Игра началась! Наступает ночь...', timestamp: new Date()}];
            
            // Сохраняем состояние
            saveGameState();
            
            // Переключаем на экран игры
            lobbyScreen.classList.remove('active');
            gameScreen.classList.add('active');
            
            // Обновляем игровой экран
            updateGameScreen();
        }
        
        // Перемешивание ролей
        function shuffleRoles() {
            for (let i = roles.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [roles[i], roles[j]] = [roles[j], roles[i]];
            }
        }
        
        // Назначение ролей игрокам
        function assignRoles() {
            gameState.players.forEach((player, index) => {
                player.role = roles[index];
            });
        }
        
        // Обновление игрового экрана
        function updateGameScreen() {
            // Находим текущего игрока в состоянии
            const player = gameState.players.find(p => p.id === currentPlayer.id);
            if (!player) return;
            
            gamePlayerCount.textContent = gameState.players.filter(p => p.status === 'alive').length;
            dayCount.textContent = gameState.dayCount;
            
            // Установка фазы
            phaseDisplay.textContent = gameState.phase === 'night' ? 'НОЧЬ' : 'ДЕНЬ';
            phaseDisplay.className = `phase-display ${gameState.phase}`;
            
            // Отображение роли текущего игрока
            playerRole.textContent = roleTranslations[player.role] || 'Роль не определена';
            playerStatus.textContent = `Статус: ${player.status === 'alive' ? 'жив' : 'мёртв'}`;
            playerStatus.className = `player-status ${player.status}`;
            
            // Обновление описания действий
            updateActionDescription(player);
            
            // Обновление логов
            updateGameLog();
            
            // Проверка окончания игры
            checkGameOver();
        }
        
        // Обновление описания действий
        function updateActionDescription(player) {
            actionButtons.innerHTML = '';
            
            // Если игрок мертв
            if (player.status !== 'alive') {
                actionDescription.textContent = 'Вы мертвы и не можете действовать.';
                return;
            }
            
            if (gameState.phase === 'night') {
                if (player.role === 'mafia') {
                    actionDescription.textContent = 'Выберите игрока для устранения:';
                    renderPlayerActions('kill', player);
                } else if (player.role === 'sheriff') {
                    actionDescription.textContent = 'Выберите игрока для проверки:';
                    renderPlayerActions('check', player);
                } else {
                    actionDescription.textContent = 'Вы спите... Наступает ночь.';
                }
            } else {
                actionDescription.textContent = 'Обсудите и выберите игрока для исключения:';
                renderPlayerActions('vote', player);
            }
        }
        
        // Рендер действий с игроками
        function renderPlayerActions(actionType, currentPlayer) {
            const alivePlayers = gameState.players.filter(p => 
                p.status === 'alive' && p.id !== currentPlayer.id
            );
            
            alivePlayers.forEach(player => {
                const btn = document.createElement('button');
                btn.textContent = player.name;
                btn.style.margin = '5px';
                
                btn.addEventListener('click', () => {
                    // Сохраняем действие игрока
                    gameState.actions[currentPlayer.id] = {
                        type: actionType,
                        target: player.id,
                        playerName: currentPlayer.name,
                        targetName: player.name
                    };
                    
                    // Логирование
                    if (actionType === 'kill') {
                        addLog(`${currentPlayer.name} (мафия) выбрал(а) ${player.name} для устранения`, 'mafia');
                    } else if (actionType === 'check') {
                        addLog(`${currentPlayer.name} (шериф) проверил(а) ${player.name}. Роль: ${roleTranslations[player.role]}`, 'sheriff');
                    } else {
                        addLog(`${currentPlayer.name} проголосовал(а) против ${player.name}`);
                    }
                    
                    // Сохраняем состояние
                    saveGameState();
                });
                
                actionButtons.appendChild(btn);
            });
            
            // Кнопка пропуска (если нужно)
            if (actionType !== 'kill' || alivePlayers.length === 0) {
                const skipBtn = document.createElement('button');
                skipBtn.textContent = 'Пропустить';
                skipBtn.style.margin = '5px';
                skipBtn.style.background = '#555';
                
                skipBtn.addEventListener('click', () => {
                    addLog(`${currentPlayer.name} пропустил(а) действие`);
                    saveGameState();
                });
                
                actionButtons.appendChild(skipBtn);
            }
        }
        
        // Следующий ход (вызывается по таймеру или при действиях всех игроков)
        function nextTurn() {
            // Эмуляция перехода хода
            const currentIndex = gameState.players.findIndex(p => p.id === gameState.currentPlayer);
            let nextIndex = (currentIndex + 1) % gameState.players.length;
            
            // Пропускаем мёртвых игроков
            while (gameState.players[nextIndex].status !== 'alive') {
                nextIndex = (nextIndex + 1) % gameState.players.length;
                
                // Если остался только один игрок, заканчиваем круг
                if (nextIndex === currentIndex) break;
            }
            
            gameState.currentPlayer = gameState.players[nextIndex].id;
            
            // Если круг завершён, меняем фазу
            if (gameState.currentPlayer === gameState.players[0].id) {
                gameState.phase = gameState.phase === 'night' ? 'day' : 'night';
                
                if (gameState.phase === 'day') {
                    addLog('Наступает день. Обсуждение начинается...');
                    // Обработка ночных действий
                    processNightActions();
                } else {
                    gameState.dayCount++;
                    addLog('Наступает ночь. Город засыпает...');
                    // Обработка дневного голосования
                    processDayActions();
                }
                
                // Очищаем действия
                gameState.actions = {};
            }
            
            // Сохраняем состояние
            saveGameState();
        }
        
        // Обработка ночных действий
        function processNightActions() {
            // Находим действие мафии
            const mafiaAction = Object.values(gameState.actions).find(a => a.type === 'kill');
            if (mafiaAction) {
                const targetPlayer = gameState.players.find(p => p.id === mafiaAction.target);
                if (targetPlayer) {
                    targetPlayer.status = 'dead';
                    addLog(`Ночью был убит ${targetPlayer.name}!`, 'mafia');
                }
            }
        }
        
        // Обработка дневных действий
        function processDayActions() {
            // Считаем голоса
            const votes = {};
            Object.values(gameState.actions).forEach(action => {
                if (action.type === 'vote') {
                    votes[action.target] = (votes[action.target] || 0) + 1;
                }
            });
            
            // Находим игрока с максимальным количеством голосов
            let maxVotes = 0;
            let targetPlayerId = null;
            
            Object.entries(votes).forEach(([playerId, count]) => {
                if (count > maxVotes) {
                    maxVotes = count;
                    targetPlayerId = playerId;
                }
            });
            
            // Исключаем игрока
            if (targetPlayerId && maxVotes > 0) {
                const targetPlayer = gameState.players.find(p => p.id === targetPlayerId);
                if (targetPlayer) {
                    targetPlayer.status = 'dead';
                    addLog(`Днём игроки исключили ${targetPlayer.name}!`);
                }
            }
        }
        
        // Добавление записи в лог
        function addLog(message, type = '') {
            gameState.logs.push({message, type, timestamp: new Date()});
            
            if (gameState.logs.length > 15) {
                gameState.logs.shift();
            }
            
            saveGameState();
        }
        
        // Обновление логов
        function updateGameLog() {
            gameLog.innerHTML = '';
            
            gameState.logs.forEach(log => {
                const logEntry = document.createElement('div');
                logEntry.className = `log-entry ${log.type ? log.type + '-log' : ''}`;
                logEntry.innerHTML = `<i class="far fa-clock"></i> ${log.message}`;
                gameLog.appendChild(logEntry);
            });
            
            // Прокрутка вниз
            gameLog.scrollTop = gameLog.scrollHeight;
        }
        
        // Проверка окончания игры
        function checkGameOver() {
            const alivePlayers = gameState.players.filter(p => p.status === 'alive');
            const mafiaCount = alivePlayers.filter(p => p.role === 'mafia').length;
            const civiliansCount = alivePlayers.filter(p => p.role !== 'mafia').length;
            
            if (mafiaCount === 0) {
                endGame('civilians');
            } else if (mafiaCount >= civiliansCount) {
                endGame('mafia');
            } else if (alivePlayers.length === 1) {
                endGame(alivePlayers[0].role === 'mafia' ? 'mafia' : 'civilians');
            }
        }
        
        // Завершение игры
        function endGame(winner) {
            gameState.gameOver = true;
            gameState.winner = winner;
            saveGameState();
            
            // Переключение на экран результатов
            gameScreen.classList.remove('active');
            resultScreen.classList.add('active');
            
            // Обновление экрана результатов
            updateResultScreen();
        }
        
        // Обновление экрана результатов
        function updateResultScreen() {
            // Установка заголовка
            winnerTitle.textContent = gameState.winner === 'civilians' 
                ? 'Победа мирных жителей!' 
                : 'Победа мафии!';
            
            // Отображение результатов игроков
            resultPlayerList.innerHTML = '';
            
            gameState.players.forEach(player => {
                const playerCard = document.createElement('div');
                playerCard.className = `player-card ${player.role} ${player.status}`;
                
                const roleClass = player.role + '-badge';
                const roleName = roleTranslations[player.role];
                
                playerCard.innerHTML = `
                    <div class="player-name">${player.name}</div>
                    <div>
                        <span class="role-badge ${roleClass}">${roleName}</span>
                    </div>
                    <div class="player-status ${player.status}">
                        ${player.status === 'alive' ? 'Выжил' : 'Убит'}
                    </div>
                `;
                
                resultPlayerList.appendChild(playerCard);
            });
        }
        
        // Перезапуск игры
        function restartGame() {
            // Создаем новое состояние
            gameState = {
                roomId: gameState.roomId,
                players: [],
                currentPlayer: null,
                dayCount: 1,
                phase: 'night',
                gameOver: false,
                winner: null,
                logs: [],
                actions: {}
            };
            
            // Сбрасываем текущего игрока
            currentPlayer = {
                id: null,
                name: '',
                role: null,
                status: 'alive'
            };
            
            saveGameState();
            
            // Переключение на экран входа
            resultScreen.classList.remove('active');
            joinScreen.classList.add('active');
            
            // Очистка ввода
            playerNameInput.value = 'Игрок' + (Math.floor(Math.random() * 100));
            joinPlayerNameInput.value = 'Игрок' + (Math.floor(Math.random() * 100));
        }
        
        // Возврат на экран ввода ID
        function goBackToJoinScreen() {
            lobbyScreen.classList.remove('active');
            joinScreen.classList.add('active');
        }
        
        // Эмуляция игрового цикла
        setInterval(() => {
            if (gameScreen.classList.contains('active') && !gameState.gameOver) {
                nextTurn();
            }
        }, 10000);
        
        // Запуск игры при загрузке
        window.onload = initGame;
    </script>
</body>
</html>
