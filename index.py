import logging
import random
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CREATE_ROOM, JOIN_ROOM, LOBBY, GAME_NIGHT, GAME_DAY, VOTING = range(6)

# –†–æ–ª–∏
ROLES = {
    'mafia': '–ú–∞—Ñ–∏—è',
    'sheriff': '–®–µ—Ä–∏—Ñ',
    'civilian': '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å',
    'doctor': '–î–æ–∫—Ç–æ—Ä',
    'lover': '–õ—é–±–æ–≤–Ω–∏—Ü–∞',
    'maniac': '–ú–∞–Ω—å—è–∫'
}

# –û–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π
ROLE_DESCRIPTIONS = {
    'mafia': "–í—ã - –º–∞—Ñ–∏—è! –ù–æ—á—å—é —É—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤. –î–Ω—ë–º –Ω–µ –ø–æ–ø–∞–¥–∏—Ç–µ—Å—å. –¶–µ–ª—å - –æ—Å—Ç–∞—Ç—å—Å—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ.",
    'sheriff': "–í—ã - —à–µ—Ä–∏—Ñ! –ù–æ—á—å—é –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤. –î–Ω—ë–º –ø–æ–º–æ–≥–∞–π—Ç–µ –º–∏—Ä–Ω—ã–º –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é.",
    'civilian': "–í—ã - –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å! –ù–æ—á—å—é —Å–ø–∏—Ç–µ. –î–Ω—ë–º –æ–±—Å—É–∂–¥–∞–π—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ñ–∏—é.",
    'doctor': "–í—ã - –î–æ–∫—Ç–æ—Ä! –ù–æ—á—å—é –º–æ–∂–µ—Ç–µ –ª–µ—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –µ–≥–æ —É–±–∏–π—Å—Ç–≤–æ.",
    'lover': "–í—ã - –õ—é–±–æ–≤–Ω–∏—Ü–∞! –ú–æ–∂–µ—Ç–µ –∑–∞—â–∏—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é, –Ω–æ –µ—Å–ª–∏ –≤–∞—Å —É–±—å—é—Ç, –≤–∞—à –∏–∑–±—Ä–∞–Ω–Ω–∏–∫ —É–º—Ä—ë—Ç —Å –≤–∞–º–∏.",
    'maniac': "–í—ã - –ú–∞–Ω—å—è–∫! –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —É–±–∏–π—Ü–∞. –ü–æ–±–µ–∂–¥–∞–µ—Ç–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—ã–∂–∏–≤—à–∏–º."
}

# VIP-—Ä–æ–ª–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
VIP_ROLES = {
    'doctor': {'name': '–î–æ–∫—Ç–æ—Ä', 'cost': 10, 'description': '–ú–æ–∂–µ—Ç –ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é'},
    'lover': {'name': '–õ—é–±–æ–≤–Ω–∏—Ü–∞', 'cost': 15, 'description': '–ú–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é'},
    'maniac': {'name': '–ú–∞–Ω—å—è–∫', 'cost': 20, 'description': '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —É–±–∏–π—Ü–∞'}
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
rooms = {}
players = {}
user_balances = {}
user_stats = {}
game_logs = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id not in players:
        players[user.id] = {
            'name': user.first_name,
            'room': None,
            'role': None,
            'status': 'alive',
            'is_host': False,
            'balance': 100,
            'games_played': 0,
            'games_won': 0,
            'mafia_wins': 0,
            'civilian_wins': 0
        }
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data='create_room')],
        [InlineKeyboardButton("üîç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data='join_room')],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='my_balance')],
        [InlineKeyboardButton("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='my_stats')],
        [InlineKeyboardButton("üíé VIP –ú–∞–≥–∞–∑–∏–Ω", callback_data='vip_shop')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞—Ñ–∏—è!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def create_room(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
    room_id = f"MAF-{random.randint(1000, 9999)}"
    while room_id in rooms:
        room_id = f"MAF-{random.randint(1000, 9999)}"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É
    rooms[room_id] = {
        'host': user.id,
        'players': [user.id],
        'status': 'waiting',
        'game_started': False,
        'phase': 'night',
        'day_count': 1,
        'votes': {},
        'kill_target': None,
        'check_target': None,
        'heal_target': None,
        'protect_target': None,
        'murder_target': None
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    players[user.id]['room'] = room_id
    players[user.id]['is_host'] = True
    
    # –õ–æ–≥–≥–∏—Ä—É–µ–º
    game_logs[room_id] = [f"–ö–æ–º–Ω–∞—Ç–∞ {room_id} —Å–æ–∑–¥–∞–Ω–∞! –•–æ—Å—Ç: {user.first_name}"]
    
    await query.edit_message_text(
        f"üéâ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"ID –∫–æ–º–Ω–∞—Ç—ã: {room_id}\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n\n"
        f"–ò–≥—Ä–æ–∫–∏ (1/5):\n"
        f"üë§ {user.first_name} (–•–æ—Å—Ç)\n\n"
        f"–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ /startgame",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )
    return LOBBY

async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ MAF-XXXX:"
    )
    return JOIN_ROOM

async def join_room_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–æ–º–Ω–∞—Ç—ã."""
    user = update.message.from_user
    room_id = update.message.text.upper().strip()
    
    if room_id not in rooms:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return JOIN_ROOM
    
    room = rooms[room_id]
    
    if len(room['players']) >= 5:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ú–∞–∫—Å–∏–º—É–º 5 –∏–≥—Ä–æ–∫–æ–≤."
        )
        return JOIN_ROOM
    
    if user.id in room['players']:
        await update.message.reply_text(
            "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ."
        )
        return LOBBY
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    room['players'].append(user.id)
    players[user.id]['room'] = room_id
    players[user.id]['is_host'] = False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    for player_id in room['players']:
        try:
            await context.bot.send_message(
                player_id,
                f"üéâ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!"
            )
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}")
    
    await update.message.reply_text(
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ {room_id}!\n\n"
        f"–ò–≥—Ä–æ–∫–∏ ({len(room['players'])}/5):\n" +
        "\n".join([f"üë§ {players[p]['name']}" + (" (–•–æ—Å—Ç)" if p == room['host'] else "") for p in room['players']]) +
        f"\n\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã..."
    )
    return LOBBY

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã."""
    user = update.message.from_user
    player = players.get(user.id)
    
    if not player or not player['room']:
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–Ω–∞—á–∞–ª–∞."
        )
        return
    
    room_id = player['room']
    room = rooms[room_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ö–æ—Å—Ç
    if user.id != room['host']:
        await update.message.reply_text(
            "‚ùå –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if len(room['players']) < 3:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ú–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã."
        )
        return
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
    room['status'] = 'in_progress'
    room['game_started'] = True
    room['alive_players'] = room['players'][:]
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏
    roles = ['mafia', 'sheriff'] + ['civilian'] * (len(room['players']) - 2)
    random.shuffle(roles)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP-—Ä–æ–ª–∏
    for i, player_id in enumerate(room['players']):
        player_role = roles[i]
        
        # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∫—É–ø–ª–µ–Ω–∞ VIP-—Ä–æ–ª—å, –∑–∞–º–µ–Ω—è–µ–º
        if players[player_id].get('vip_role'):
            player_role = players[player_id]['vip_role']
        
        players[player_id]['role'] = player_role
        players[player_id]['status'] = 'alive'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º —Å –∏—Ö —Ä–æ–ª—è–º–∏
    for player_id in room['players']:
        role = players[player_id]['role']
        role_name = ROLES.get(role, role)
        
        try:
            await context.bot.send_message(
                player_id,
                f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_name}\n\n"
                f"{ROLE_DESCRIPTIONS[role]}\n\n"
                f"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã!"
            )
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    game_logs[room_id].append("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–æ–ª–∏.")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É
    await night_phase(context, room_id)
    return GAME_NIGHT

async def night_phase(context: ContextTypes.DEFAULT_TYPE, room_id: str) -> None:
    """–ù–∞—á–∞–ª–æ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã."""
    room = rooms[room_id]
    room['phase'] = 'night'
    room['phase_end'] = datetime.now() + timedelta(minutes=2)
    room['votes'] = {}
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for player_id in room['alive_players']:
        player = players[player_id]
        
        try:
            # –î–ª—è –º–∞—Ñ–∏–∏
            if player['role'] == 'mafia':
                alive_players = [
                    p for p in room['alive_players'] 
                    if p != player_id and players[p]['status'] == 'alive'
                ]
                
                if alive_players:
                    keyboard = [
                        [InlineKeyboardButton(players[p]['name'], callback_data=f"kill_{p}")]
                        for p in alive_players
                    ]
                    await context.bot.send_message(
                        player_id,
                        "üåë –ù–æ—á—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await context.bot.send_message(
                        player_id,
                        "üåë –ù–æ—á—å. –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è."
                    )
            
            # –î–ª—è —à–µ—Ä–∏—Ñ–∞
            elif player['role'] == 'sheriff':
                alive_players = [
                    p for p in room['alive_players'] 
                    if p != player_id and players[p]['status'] == 'alive'
                ]
                
                if alive_players:
                    keyboard = [
                        [InlineKeyboardButton(players[p]['name'], callback_data=f"check_{p}")]
                        for p in alive_players
                    ]
                    await context.bot.send_message(
                        player_id,
                        "üåë –ù–æ—á—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await context.bot.send_message(
                        player_id,
                        "üåë –ù–æ—á—å. –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
                    )
            
            # –î–ª—è –¥–æ–∫—Ç–æ—Ä–∞
            elif player['role'] == 'doctor':
                alive_players = [
                    p for p in room['alive_players'] 
                    if players[p]['status'] == 'alive'
                ]
                
                if alive_players:
                    keyboard = [
                        [InlineKeyboardButton(players[p]['name'], callback_data=f"heal_{p}")]
                        for p in alive_players
                    ]
                    await context.bot.send_message(
                        player_id,
                        "üåë –ù–æ—á—å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    await context.bot.send_message(
                        player_id,
                        "üåë –ù–æ—á—å. –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è."
                    )
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            else:
                await context.bot.send_message(
                    player_id,
                    "üåë –ù–æ—á—å. –í—ã —Å–ø–∏—Ç–µ..."
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–∏
    context.job_queue.run_once(
        end_night_phase, 
        timedelta(minutes=2), 
        data=room_id,
        name=f"night_timer_{room_id}"
    )

async def handle_night_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ—á—å—é."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    player = players.get(user.id)
    action, target_id = query.data.split('_')
    target_id = int(target_id)
    
    if not player or not player['room']:
        return
    
    room_id = player['room']
    room = rooms.get(room_id)
    
    if not room or room['phase'] != 'night':
        return
    
    target_player = players.get(target_id)
    
    if not target_player or target_player['status'] != 'alive':
        await query.edit_message_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –º–µ—Ä—Ç–≤.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if action == 'kill' and player['role'] == 'mafia':
        room['kill_target'] = target_id
        game_logs[room_id].append(f"–ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ —Ü–µ–ª—å: {target_player['name']}")
        await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {target_player['name']} –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.")
    
    elif action == 'check' and player['role'] == 'sheriff':
        room['check_target'] = target_id
        role = target_player['role']
        role_name = ROLES.get(role, role)
        game_logs[room_id].append(f"–®–µ—Ä–∏—Ñ –ø—Ä–æ–≤–µ—Ä–∏–ª –∏–≥—Ä–æ–∫–∞: {target_player['name']} ({role_name})")
        await query.edit_message_text(f"üîç –ò–≥—Ä–æ–∫ {target_player['name']} - {role_name}")
    
    elif action == 'heal' and player['role'] == 'doctor':
        room['heal_target'] = target_id
        game_logs[room_id].append(f"–î–æ–∫—Ç–æ—Ä –ª–µ—á–∏—Ç: {target_player['name']}")
        await query.edit_message_text(f"üíä –í—ã –ª–µ—á–∏—Ç–µ {target_player['name']}.")

async def end_night_phase(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π."""
    room_id = context.job.data
    room = rooms.get(room_id)
    
    if not room or room['phase'] != 'night':
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    killed_player = None
    if room['kill_target'] and room['kill_target'] != room['heal_target']:
        killed_id = room['kill_target']
        killed_player = players.get(killed_id)
        
        if killed_player and killed_player['status'] == 'alive':
            killed_player['status'] = 'dead'
            room['alive_players'].remove(killed_id)
            game_logs[room_id].append(f"‚ö∞Ô∏è –ò–≥—Ä–æ–∫ {killed_player['name']} –±—ã–ª —É–±–∏—Ç –º–∞—Ñ–∏–µ–π!")
    
    # –°–±—Ä–æ—Å —Ü–µ–ª–µ–π
    room['kill_target'] = None
    room['check_target'] = None
    room['heal_target'] = None
    room['protect_target'] = None
    room['murder_target'] = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if await check_game_over(context, room_id):
        return
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    message = "‚òÄÔ∏è –ù–æ—á—å –æ–∫–æ–Ω—á–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    if killed_player:
        message += f"‚ö∞Ô∏è {killed_player['name']} –±—ã–ª —É–±–∏—Ç –º–∞—Ñ–∏–µ–π!\n\n"
    else:
        message += "‚úÖ –≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±!\n\n"
    
    message += f"–î–µ–Ω—å {room['day_count']} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"
    
    for player_id in room['alive_players']:
        try:
            await context.bot.send_message(player_id, message)
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Ñ–∞–∑—É
    await day_phase(context, room_id)

async def day_phase(context: ContextTypes.DEFAULT_TYPE, room_id: str) -> None:
    """–ù–∞—á–∞–ª–æ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã."""
    room = rooms[room_id]
    room['phase'] = 'day'
    room['phase_end'] = datetime.now() + timedelta(minutes=5)
    room['votes'] = {}
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    alive_players = room['alive_players']
    player_list = "\n".join([f"üë§ {players[p]['name']}" for p in alive_players])
    
    for player_id in alive_players:
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            vote_keyboard = []
            for target_id in alive_players:
                if target_id != player_id:
                    vote_keyboard.append(
                        [InlineKeyboardButton(
                            players[target_id]['name'], 
                            callback_data=f"vote_{target_id}"
                        )]
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è"
            vote_keyboard.append(
                [InlineKeyboardButton("ü§∑ –í–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è", callback_data="vote_abstain")]
            )
            
            await context.bot.send_message(
                player_id,
                f"‚òÄÔ∏è –î–µ–Ω—å {room['day_count']} –Ω–∞—á–∞–ª—Å—è!\n\n"
                f"–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n{player_list}\n\n"
                "–û–±—Å—É–¥–∏—Ç–µ –∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞:",
                reply_markup=InlineKeyboardMarkup(vote_keyboard)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–Ω—è
    context.job_queue.run_once(
        end_day_phase, 
        timedelta(minutes=5), 
        data=room_id,
        name=f"day_timer_{room_id}"
    )

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    player = players.get(user.id)
    
    if not player or not player['room']:
        return
    
    room_id = player['room']
    room = rooms.get(room_id)
    
    if not room or room['phase'] != 'day' or user.id not in room['alive_players']:
        return
    
    action, vote_target = query.data.split('_')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞
    if vote_target == 'abstain':
        room['votes'][user.id] = None
        await query.edit_message_text("‚úÖ –í—ã –≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å –æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
    else:
        target_id = int(vote_target)
        if target_id in room['alive_players']:
            room['votes'][user.id] = target_id
            target_name = players[target_id]['name']
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ {target_name}.")
        else:
            await query.edit_message_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ª–∏ –≤—Å–µ
    if len(room['votes']) == len(room['alive_players']):
        await end_day_phase(context, room_id)

async def end_day_phase(context: ContextTypes.DEFAULT_TYPE, room_id: str) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Ñ–∞–∑—ã –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."""
    room = rooms.get(room_id)
    
    if not room or room['phase'] != 'day':
        return
    
    # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
    vote_counts = {}
    for target_id in room['votes'].values():
        if target_id:
            vote_counts[target_id] = vote_counts.get(target_id, 0) + 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    exiled_player = None
    if vote_counts:
        max_votes = max(vote_counts.values())
        candidates = [tid for tid, count in vote_counts.items() if count == max_votes]
        
        if len(candidates) == 1:
            exiled_id = candidates[0]
            exiled_player = players.get(exiled_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    message = "üåë –î–µ–Ω—å –æ–∫–æ–Ω—á–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"
    if exiled_player and exiled_player['status'] == 'alive':
        exiled_player['status'] = 'dead'
        room['alive_players'].remove(exiled_id)
        message += f"‚öñÔ∏è {exiled_player['name']} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–∞–º–∏!\n"
    else:
        message += "‚úÖ –ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω.\n"
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
    room['day_count'] += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if await check_game_over(context, room_id):
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    for player_id in room['alive_players']:
        try:
            await context.bot.send_message(player_id, message + "\n–ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å...")
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É
    await night_phase(context, room_id)

async def check_game_over(context: ContextTypes.DEFAULT_TYPE, room_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã."""
    room = rooms.get(room_id)
    if not room:
        return False
    
    alive_players = room['alive_players']
    mafia_count = sum(1 for p in alive_players if players[p]['role'] == 'mafia')
    civilians_count = sum(1 for p in alive_players if players[p]['role'] in ['civilian', 'sheriff', 'doctor'])
    maniac_count = sum(1 for p in alive_players if players[p]['role'] == 'maniac')
    
    # –ü–æ–±–µ–¥–∞ –º–∞—Ñ–∏–∏
    if mafia_count >= len(alive_players) - mafia_count:
        await end_game(context, room_id, 'mafia')
        return True
    
    # –ü–æ–±–µ–¥–∞ –º–∏—Ä–Ω—ã—Ö
    if mafia_count == 0 and maniac_count == 0:
        await end_game(context, room_id, 'civilians')
        return True
    
    # –ü–æ–±–µ–¥–∞ –º–∞–Ω—å—è–∫–∞
    if maniac_count > 0 and len(alive_players) == 1:
        await end_game(context, room_id, 'maniac')
        return True
    
    return False

async def end_game(context: ContextTypes.DEFAULT_TYPE, room_id: str, winner: str) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤."""
    room = rooms.get(room_id)
    if not room:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = []
    if winner == 'mafia':
        winners = [p for p in room['players'] if players[p]['role'] == 'mafia']
    elif winner == 'civilians':
        winners = [p for p in room['alive_players']]
    elif winner == 'maniac':
        winners = [p for p in room['players'] if players[p]['role'] == 'maniac']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
    for player_id in room['players']:
        players[player_id]['games_played'] += 1
        if player_id in winners:
            players[player_id]['games_won'] += 1
            if players[player_id]['role'] == 'mafia':
                players[player_id]['mafia_wins'] += 1
            else:
                players[player_id]['civilian_wins'] += 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    winner_name = ""
    if winner == 'mafia':
        winner_name = "–ú–∞—Ñ–∏—è"
    elif winner == 'civilians':
        winner_name = "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏"
    elif winner == 'maniac':
        winner_name = "–ú–∞–Ω—å—è–∫"
    
    message = f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª–∞ {winner_name}!\n\n"
    message += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    
    for player_id in room['players']:
        player = players[player_id]
        role_name = ROLES.get(player['role'], player['role'])
        status = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å" if player_id in winners else "üíÄ –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π"
        message += f"üë§ {player['name']} ({role_name}) - {status}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
    for player_id in room['players']:
        try:
            await context.bot.send_message(
                player_id, 
                message,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üéÆ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                ])
            )
        except:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    for player_id in room['players']:
        players[player_id]['room'] = None
        players[player_id]['is_host'] = False
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
    del rooms[room_id]
    del game_logs[room_id]

async def vip_shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∞–≥–∞–∑–∏–Ω VIP-—Ä–æ–ª–µ–π."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    player = players.get(user.id)
    if not player:
        return
    
    balance = player['balance']
    
    message = f"üíé VIP –ú–∞–≥–∞–∑–∏–Ω:\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} TON\n\n"
    keyboard = []
    
    for role_id, role_data in VIP_ROLES.items():
        cost = role_data['cost']
        can_buy = balance >= cost
        button_text = f"{role_data['name']} - {cost} TON"
        
        if can_buy:
            callback_data = f"buy_{role_id}"
        else:
            button_text += " ‚ùå"
            callback_data = "cant_buy"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        message += f"üé≠ {role_data['name']} - {cost} TON\n{role_data['description']}\n\n"
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def buy_vip_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫—É–ø–∫–∞ VIP-—Ä–æ–ª–∏."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    _, role_id = query.data.split('_')
    player = players.get(user.id)
    
    if not player or role_id not in VIP_ROLES:
        return
    
    role_data = VIP_ROLES[role_id]
    cost = role_data['cost']
    
    if player['balance'] < cost:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
    player['balance'] -= cost
    player['vip_role'] = role_id
    
    await query.edit_message_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {role_data['name']}!\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤–∞–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω–∞ —ç—Ç–∞ —Ä–æ–ª—å.\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {player['balance']} TON",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data='vip_shop')],
            [InlineKeyboardButton("üéÆ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
        ])
    )

async def my_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    player = players.get(user.id)
    if not player:
        return
    
    balance = player['balance']
    
    await query.edit_message_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} TON\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TON –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VIP-—Ä–æ–ª–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé VIP –ú–∞–≥–∞–∑–∏–Ω", callback_data='vip_shop')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ])
    )

async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    
    player = players.get(user.id)
    if not player:
        return
    
    stats = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {player['games_played']}\n"
        f"üèÜ –ü–æ–±–µ–¥: {player['games_won']}\n"
        f"üî´ –ü–æ–±–µ–¥ –∑–∞ –º–∞—Ñ–∏—é: {player['mafia_wins']}\n"
        f"üë®‚Äçüåæ –ü–æ–±–µ–¥ –∑–∞ –º–∏—Ä–Ω—ã—Ö: {player['civilian_wins']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {player['balance']} TON"
    )
    
    await query.edit_message_text(
        stats,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
        ])
    )

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data='create_room')],
        [InlineKeyboardButton("üîç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data='join_room')],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='my_balance')],
        [InlineKeyboardButton("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='my_stats')],
        [InlineKeyboardButton("üíé VIP –ú–∞–≥–∞–∑–∏–Ω", callback_data='vip_shop')]
    ]
    
    await query.edit_message_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞—Ñ–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é."""
    await update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token("8073679860:AAHqweMOTy2Lun9j-H-sgbK_MbL5mUaTWLw").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CREATE_ROOM: [CallbackQueryHandler(create_room, pattern='^create_room$')],
            JOIN_ROOM: [
                CallbackQueryHandler(join_room, pattern='^join_room$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, join_room_id)
            ],
            LOBBY: [
                CommandHandler('startgame', start_game),
                CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$')
            ],
            GAME_NIGHT: [
                CallbackQueryHandler(handle_night_action, pattern='^(kill|check|heal)_\d+$')
            ],
            GAME_DAY: [
                CallbackQueryHandler(handle_vote, pattern='^vote_')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(vip_shop, pattern='^vip_shop$'))
    application.add_handler(CallbackQueryHandler(my_balance, pattern='^my_balance$'))
    application.add_handler(CallbackQueryHandler(my_stats, pattern='^my_stats$'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(CallbackQueryHandler(buy_vip_role, pattern='^buy_'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
